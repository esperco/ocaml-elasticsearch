(**
   This OCaml interface to elasticsearch is incomplete.
   See http://www.elasticsearch.org/guide/reference/api/ for more goodies.
*)

open Es_client_t

type uri = string
type response = (int * (string * string) list * string)
  (** HTTP response: status code, headers, body *)

module type Http_client =
sig
  type 'a computation
    (** Abstract computation, allowing use of asynchronous computations
        such as Lwt.
        Synchronous case: [type 'a computation = 'a] *)

  val bind : 'a computation -> ('a -> 'b computation) -> 'b computation
    (** Synchronous case: [let bind x f = f x] *)

  val return : 'a -> 'a computation
    (** Synchronous case: [let return x = x] *)

  val head :
    ?headers:(string * string) list ->
    uri -> response option computation
  val get :
    ?headers:(string * string) list ->
    uri -> response option computation
  val post :
    ?headers:(string * string) list ->
    ?body:string ->
    uri -> response option computation
  val delete :
    ?headers:(string * string) list ->
    uri -> response option computation
  val put :
    ?headers:(string * string) list ->
    ?body:string ->
    uri -> response option computation
end

module Sync :
sig
  type 'a computation = 'a
  val bind : 'a -> ('a -> 'b) -> 'b
  val return : 'a -> 'a
end

module type Server_address =
sig
  val host : unit -> string
  val port : unit -> int
end

module Default_address : Server_address

module type Json_serializable =
sig
  type t

  (* read and write functions normally auto-generated by atdgen -j *)
  val read : doc_type:string -> Yojson.Safe.lexer_state -> Lexing.lexbuf -> t
  val write : Bi_outbuf.t -> t -> unit
end

module type Client =
sig
  type 'a computation
  type item
  type doc_id = string

  val index_exists : string -> bool computation
    (** Check whether an index exists. *)

  val create_index :
    ?shards: int ->
    ?replicas: int ->
    string -> Es_mapping.doc_mapping list ->
    unit computation
    (** Create an index with mapping definitions (exactly one mapping
        is recommended). *)

  val create_index :
    ?shards: int ->
    ?replicas: int ->
    string -> Es_mapping.doc_mapping list ->
    unit computation
    (** Create an index with mapping definitions (exactly one mapping
        is recommended). *)

  val create_or_update_index :
    ?shards:int ->
    ?replicas:int ->
    string -> Es_mapping.doc_mapping list -> unit computation
    (** Create an index if it doesn't exist. Add or replace the given
        mappings.
        The [shards] and [replicas] parameters are ignored if the
        index already exists. *)

  val delete_index : string -> unit computation

  val refresh_index : string -> unit computation

  val put_mapping :
    index: string -> Es_mapping.doc_mapping ->
    unit computation
    (** Add or extend an existing mapping.
        Make sure you don't introduce conflicts. *)

  val put_mappings :
    index: string -> Es_mapping.doc_mapping list ->
    unit computation
    (** Same as [put_mapping] but puts multiple mappings.
        Returns true iff completely successful. *)

  val get_mapping :
    index: string -> string ->
    string computation
    (** Get a mapping as a JSON blob, for debugging purposes. *)

  val get_item :
    index: string -> mapping: string -> doc_id ->
    item option computation

  val get_items :
    index: string -> mapping: string -> get_request_key list ->
    item list computation
      (** returns items that are available *)

  val index_item :
    ?parent_id: doc_id ->
    index: string -> mapping: string -> id: doc_id -> item: item -> unit ->
    unit computation

  val update_item :
    ?parent_id: doc_id ->
    index: string -> mapping: string -> id: doc_id -> item: item -> unit ->
    unit computation

  val delete_item :
    index: string -> mapping: string -> id: doc_id ->
    unit computation

  val all_indexes : string list
  val all_mappings : string list

  val default_sort : (string * sort_order) list
  val search :
    indexes: string list -> mappings: string list ->
    ?qid: string -> ?from: int -> ?size: int ->
    ?sort: (string * sort_order) list list ->
    Es_query.query ->
    item hit search_result computation
      (**
         Perform a search query and return a slice of the results.

         You may use [all_indexes] to search across all indexes,
         and similarly [all_mappings] to search across all mappings.

         @param from offset from which results should be returned (default: 0)
         @param size maximum number of results to return (default: 10)
      *)
  val count :
    indexes: string list -> mappings: string list ->
    ?qid: string ->
    Es_query.query ->
    int computation

end


module Make
  (Http_client : Http_client)
  (Server : Server_address)
  (Item : Json_serializable) :
  Client with type 'a computation = 'a Http_client.computation
          and type item = Item.t
